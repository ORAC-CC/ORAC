"""Definitions of default values/paths for your local system."""

# ===== PATHS =====
"""Location of your copy of the ORAC repository. Used to find executables."""
orac_dir = '/home/username/orac/orac'

"""Location of the regression test data directory. Used by regression.py.
Ask the dev team for a copy if you intend to alter the code."""
data_dir = '/local/storage/orac/data'

"""Path to library file used to compile ORAC. Used by
pyorac.util.build_orac_library_path() to set LD_LIBRARY_PATH."""
orac_lib = '/home/username/orac/orac/config/lib.inc'

"""Location of the look-up tables. Multiple locations can be set as a list."""
sad_dirs = ['/local/storage/orac_luts', ]

"""Indicates the format of meteorological data used. The values are:
0. A single ERA Interim GRIB file, as would be downloaded directly from ECMWF.
   https://apps.ecmwf.int/datasets/data/interim-full-daily/levtype=sfc/
1. Three ERA Interim NCDF files, preprocessed by RAL from the JASMIN repo.
2. Three ERA Interim files (1 NCDF, 2 GRIB) as found on JASMIN
   /badc/ecmwf-era-interim/data.
3. A single ERA Interim NCDF file, preprocessed by RAL from an ECMWF download.
4. A single operational ECMWF NCDF file.
5. A single ERA5 NCDF file.
6. A single GFS4 forecast file.
7. A single GFS reanalysis GRIB file.
8. A single GFS reanalysis NCDF file."""
ecmwf_flag  = 5

# If any of these directories contain subdirectories named by date, please use
# the syntax of datatime.strftime() to denote the folder structure.
auxiliaries = {
    # Directory containing RTTOV emissivity atlas
    # https://www.nwpsaf.eu/site/software/rttov/download/
    'atlas_dir'   : '/usr/lib/rtcoef_rttov12/emis_data',

    # Directory of RTTOV instrument coefficient files
    # www.nwpsaf.eu/site/software/rttov/download/coefficients/coefficient-download
    'coef_dir'    : '/usr/lib/rtcoef_rttov12',

    # Directory of MODIS emisivity retrievals
    # https://lpdaac.usgs.gov/dataset_discovery/modis/modis_products_table/myd11c3_v006
    'emis_dir'    : '/local/storage/modis_emis',

    # Directory of CAMEL emisivity retrievals, which are preferred
    'camel_dir'   : '/local/storage/camel_emis',

    # Directories of MODIS surface BRDF retrievals
    # https://lpdaac.usgs.gov/dataset_discovery/modis/modis_products_table/mcd43c1_v006
    # https://lpdaac.usgs.gov/dataset_discovery/modis/modis_products_table/mcd43c3_v006
    'mcd43c1_dir' : '/local/storage/modis/mcd43cX/%Y',
    'mcd43c3_dir' : '/local/storage/modis/mcd43cX/%Y',

    # To use ECMWF data from the BADC/CEMS archive (ecmwf_flag == 2), specifiy
    # where each of the three types of file are stored
    'ggam_dir'    : '/local/storage/ecmwf/era_interim/%Y/%m/%d',
    'ggas_dir'    : '/local/storage/ecmwf/era_interim/%Y/%m/%d',
    'spam_dir'    : '/local/storage/ecmwf/era_interim/%Y/%m/%d',

    # To use a single ECMWF file (ecmwf_flag == 0), specify their location
    #'ecmwf_dir'   : '/local/storage/ecmwf/era_interim/%Y/%m/%d',

    # To use ERA5 (ecmwf_flag == 5), specify
    #'ecmwf_dir'   : '/local/storage/era5/%Y/%m/%d',

    # Directory of high-resolution ECMWF files. During Cloud CCI, 0.72deg
    # reanalyses were used and found to produce unrealistic results at coasts
    # and lake edges. Using a 0.36deg analysis for the wind speeds was found
    # to improve this, so two files would be read in. This feature is
    # uneccesary for any other meteorological input.
    'hr_dir'      : '/local/storage/ecmwf/era_hr',

    # Directory to store the EMOS interpolation file. LibEmos will put a file
    # CF_T0255_R0036000 in your home directory unless the environment variable
    # PPDIR is set. This is done in the conda activation so this variable
    # should be set to os.environ['PPDIR'].
    'emos_dir'    : '/usr/lib/emos_files',

    # Directory of NSIDC ice/snow extent maps
    # https://n5eil01u.ecs.nsidc.org/SAN/OTHR/
    'nise_dir'    : '/local/storage/n5eil01u.ecs.nsidc.org/SAN/OTHR',

    # Directory of Ocean Colour CCI retrievals
    # ftp://ftp.rsg.pml.ac.uk/occci-v4.2/geographic/netcdf/monthly/chlor_a/
    'occci_dir'   : '/usr/lib/orac/data/occci',

    # File containing AATSR calibration coefficients
    # https://groups.physics.ox.ac.uk/eodg/orac/AATSR_VIS_DRIFT_V03-00.DAT
    'calib_file'  : '/usr/lib/AATSR_VIS_DRIFT_V03-00.DAT',

    # File containing the USGS land-use map. This is used to provide a land/sea
    # for the early NOAA satellites, which don't include it. We recommend
    # using --l1_land_mask or the geostationary files instead (and intend to
    # make that the default behaviour eventually).
    # https://groups.physics.ox.ac.uk/eodg/orac/Aux_file_CM_SAF_AVHRR_GAC_ori_0.05deg.nc
    'usgs_file'   : '/usr/lib/Aux_file_CM_SAF_AVHRR_GAC_ori_0.05deg.nc',

    # Pre-defined geometry for geostationary imager. Please request if needed.
    'prelsm_file' : '/usr/lib/orac/data/GEO_FILES/MSG_000E_LSM.nc',
    'pregeo_file' : '/usr/lib/orac/data/GEO_FILES/MSG_000E_ANGLES.nc',

    # Climatology of Swansea s and p parameters. Please request if needed.
    'swansea_dir' : '/usr/lib/swansea_cb',
}


# ===== FILE HEADER INFORMATION =====

global_attributes = {
    "cfconvention" : "CF-1.4",
    "comments"     : "n/a",

    # Put your own email here
    "email"        : 'user.name@orac.ac.uk',

    "history"      : "n/a",

    # Put your own institute here
    "institute"    : "Uni",

    "keywords"     : "aerosol; cloud; optimal estimation",
    "license"      : "https://github.com/ORAC-CC/orac/blob/master/COPYING",
    "processor"    : "ORAC",

    # These adjust the default filename
    "product_name" : "L2-CLOUD-CLD",
    "project"      : "ESACCI",

    "references"   : "doi:10.5194/amt-5-1889-2012",
    "summary"      : "n/a",
    "url"          : "http://github.com/ORAC-CC/orac",
}


# ===== FOLDER NAME PREFERENCES =====

"""The scripts will generate subdirectories to store intermediary and log files.
These specify the names of those."""
log_dir = "log"
pre_dir = "pre"

"""Some users desire specific control over each retrieval. If there are settings
you routinely wish used for all aerosol retrievals over land or sea or cloud
retrievals, put those (as raw driver file input) in a file and put the path to
each file here. Otherwise, leave as is."""
extra_lines = {
    "land_extra" : "",
    "sea_extra"  : "",
    "cld_extra"  : "",
}


# ===== DEFAULT RETRIEVAL SETTINGS =====

"""This section outlines the default arguments for retrievals as a function
of the particle phase and instrument. Inexperienced users should not edit this.

The retrieval_settings dictionary is used by the Python scripts to interpret
command line arguments. When the script is called with `-S tag`, the script
iterates over each element of the list retrieval_settings[tag], appending that
text to the current script call and parsing it like other arguments.

The code below outlines our current recommended retrievals. These are tagged
with the instrument name (AATSR, ATSR2, AVHRR, MODIS, SEVIRI), an underscore,
and a tag. C tags cloud retrievals, A aerosol retrievals, and J a joint aerosol-
cloud run.

For example, retrieval_settings["MODIS_C"] = [
    '--use_channels 1 2 6 20 31 32 --phase WAT --ret_class ClsCldWat --approach AppCld1L --sub_dir cld',
    '--use_channels 1 2 6 20 31 32 --phase ICE --ret_class ClsCldIce --approach AppCld1L --sub_dir cld',
    '--use_channels 1 2 6 20 31 32 --phase WAT --ret_class ClsCldWat --approach AppCld2L --multilayer ICE ClsCldIce --sub_dir cld'
]
Thus, if you call orac.py -S MODIS_C $SOME_MODIS_FILE, the ORAC processor will be
called 3 times as there are three elements in this array. Each line contains,
'--use_channels 1 2 6 20 31 32' to specify 6 channels to use in the retrieval
and '--sub_dir cld' to indicate that output files should be stored in a
subdirectory called 'cld'. Then, the first call will consider single-layer water
cloud and the second single-later ice cloud (from the --phase argument). The
third call will evaluate a layer of ice cloud (--multilayer) above water.
"""

retrieval_settings = {}

# Permute a set of standard cloud retrievals over each sensor
cld_retrievals = {
    "wat_cld" : "--phase WAT --ret_class ClsCldWat --approach AppCld1L "
                "--sub_dir cld",
    "ice_cld" : "--phase ICE --ret_class ClsCldIce --approach AppCld1L "
                "--sub_dir cld",
    "wat_ice" : "--phase ICE --ret_class ClsCldIce --approach AppCld2L "
                "--multilayer WAT ClsCldWat --sub_dir cld",
#    "ice_ice" : "--phase ICE --ret_class ClsCldIce --approach AppCld2L "
#                "--multilayer ICE ClsCldIce --sub_dir cld"
}
cld_channels = {
    "AATSR" : "--use_channels 2 3 4 5 6 7",
    "ATSR2" : "--use_channels 2 3 4 5 6 7",
    "AVHRR" : "--use_channels 1 2 3 4 5 6",
    "MODIS" : "--use_channels 1 2 6 20 31 32",
    "SEVIRI" : "--use_channels 1 2 3 4 9 10",
    "SLSTR" : "--use_channels 2 3 5 7 8 9",
}
for sensor, channels in cld_channels.items():
    retrieval_settings[sensor + "_C"] = [
        channels + " " + ret for ret in cld_retrievals.values()
    ]

# Permute dual-view aerosol retrievals
aer_phases = range(70, 80)
aer_dual_retrievals = {
    "aer_ox" : "--phase A{:02d} --ret_class ClsAerOx --approach AppAerOx "
               "--no_land --sub_dir sea",
    "aer_sw" : "--phase A{:02d} --ret_class ClsAerSw --approach AppAerSw "
               "--no_sea --sub_dir land",
}
aer_dual_channels = {
    "AATSR" : "--use_channels 1 2 3 4 8 9 10 11",
    "ATSR2" : "--use_channels 1 2 3 4 8 9 10 11",
    "SLSTR" : "--use_channels 1 2 3 5 10 11 12 14",
}
for sensor, channels in aer_dual_channels.items():
    retrieval_settings[sensor + "_A"] = [
        channels + " " + ret.format(phs)
        for ret in aer_dual_retrievals.values() for phs in aer_phases
    ]

# Permute single-view aerosol retrievals
aer_single_retrievals = {
    "aer_o1" : "--phase A{:02d} --ret_class ClsAerOx --approach AppAerO1 "
               "--no_land --sub_dir sea",
}
aer_single_channels = {
    "AVHRR" : "--use channels 1 2 3",
    "MODIS" : "--use_channels 4 1 2 6",
    "SEVIRI" : "--use_channels 1 2 3",
}
for sensor, channels in aer_single_channels.items():
    retrieval_settings[sensor + "_A"] = [
        channels + " " + ret.format(phs)
        for ret in aer_single_retrievals.values() for phs in aer_phases
    ]

# Joint aerosol-cloud retrievals
for sensor, channels in cld_channels.items():
    retrieval_settings[sensor + "_J"] = [
        channels + " " + ret for ret in cld_retrievals.values()
    ]
for sensor, channels in aer_dual_channels.items():
    retrieval_settings[sensor + "_J"].extend([
        channels + " " + ret.format(phs)
        for ret in aer_dual_retrievals.values() for phs in aer_phases
    ])
for sensor, channels in aer_single_channels.items():
    retrieval_settings[sensor + "_J"].extend([
        channels + " " + ret.format(phs)
        for ret in aer_single_retrievals.values() for phs in aer_phases
    ])

# Default to cloud retrievals
for sensor in cld_channels.keys():
    retrieval_settings[sensor] = retrieval_settings[sensor + "_C"]


# ===== DEFAULT CHANNELS FOR EACH SENSOR =====

"""If --use_channels is not specified in a call, this dictionary gives the
channels to assume for each instrument. The names derive from the 'sensor'
field of a FileName instance."""
channels = {
    "AATSR" : (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
    "ATSR2" : (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
    "AVHRR" : (1, 2, 3, 4, 5, 6),
    "MODIS" : (1, 2, 6, 20, 31, 32),
    "SEVIRI" : (1, 2, 3, 4, 9, 10),
    "SLSTR" : (1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 14),
}


# ===== REGRESSION TEST SETTINGS =====

# Fields to ignore during regression testing
atts_to_ignore = ('L2_Processor_Version', 'Production_Time', 'File_Name')
vars_to_accept = ('costjm', 'costja', 'niter')

# Tollerances in regression testing
rtol = 1e-7 # Maximum permissable relative difference
atol = 1e-7 # Maximum permissable absolute difference

# Filters to apply regression test warnings
# (see https://docs.python.org/2/library/warnings.html#the-warnings-filter)
warn_filt = {
    'FieldMissing'    : 'once',
    'InconsistentDim' : 'error',
    'RoundingError'   : 'once',
    'Acceptable'      : 'once',
}


# ===== BATCH PROCESSING SETTINGS =====

"""This specifies which batch queueing system you use, from pyorac.batch."""
from pyorac.batch import bsub as batch

"""The batch queuing object takes a dictionary of settings. This specifies
values to use in every call. The example below states we should always email
the address given above if a job fails, we should have a priority of 10,000 and
use the queue 'priority'."""
batch_values = {
    'email'    : global_attributes["email"],
    'priority' : 10000,
    'queue'    : 'priority',
}

"""When running on a batch queue, ORAC is called from temporary scripts (which
setup the running environment). This string defines how these scripts start.
In this case, we use the default bash client but specify that this should not
load my .profile file, as I'm loading the variables internally."""
batch_script = """#!/bin/bash --noprofile
"""
